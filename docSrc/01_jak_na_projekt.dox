/**
\page p01_jakNaTo 01 Jak na projekt?

Projekt se může zdát z prvu obrovský s milioném souborů a všelijakých podivností.
Tyto "podivnosti" ale nemusíte řešit.
Vše, co se vás týká jsou v podstatě 2 soubory do kterých napíšete váš kód a jeden soubor s deklaracemi struktur pro referenci.
Projekt okolo těchto souborů vypadá takto z mnoha důvodů (vytvoření okna, načítaní modelů, testování, ...).
A není potřeba se jim zabývat (tedy pokud nechcete vidět vnitřnosti a jak celý projekt funguje).
Takže jak na to?<br>
Nejprve si vyzkoušejte, jak by to mělo vypadat...
\code{.sh}
# a mackejte "n" nebo "p" a ovladani mysi
izgProject_windows.exe

# a mackejte "n" nebo "p" a ovladani mysi
./izgProject_linux.bin 
\endcode
Jak je to složité? Můj kód pro student_GPU_run má ~1000 řádků a implementace student_prepareModel a shaderů ~100 řádku.
Není potřeba nic alokovat, pamět je již předchystaná. Takže pokud budete někde volat malloc, new a podobně, zamyslete se.
Z C++ se nevyužívá skoro nic (jen vector a knihovna glm, reference). Takže by to mělo jít napsat celkem v pohodě i pro C lidi.
Postup řešení:

<ol>
<li> Vyzkoušet si přiložený zkompilovaný referenční projekt izgProject_linux.bin a izgProject_windows.exe. (mačkejte "n" nebo "p", když projekt pustíte, abyste přepínali zobrazované metody).
<li> \ref p17_sestaveni "Zprovoznit si překlad"
<li> \ref p18_spousteni "Zkusit si projekt pustit a podívat se na parametry příkazové řádky." a \ref p19_ovladani "jak se aplikace ovládá"
<li> V projektu jsou přítomy \ref p20_testovani "akceptační testy", které vám řeknou, jestli jdete správným směrem a taky vypisují napovědu.
<li> Začít implementovat funkci \ref student_GPU_run a kontrolovat váš postup podle přiložených testů.
<li> Začít implementovat funkci \ref student_prepareModel
<li> Začít implementovat funkci \ref student_drawModel_vertexShader
<li> Začít implementovat funkci \ref student_drawModel_fragmentShader
<li> Ověřte si implementaci na Merlinovi
<li> \ref p21_odevzdavani "Odevzdejte"
<li> ???
<li> profit
</ol>

Každý úkol má přiřazen akceptační test, takže si můžete snadno ověřit funkčnosti vaší implementace.
<br><br>
Úkoly lze rozdělit do dvou částí: implementace grafické karty a implementace kreslení modelů se stíny.
*/
